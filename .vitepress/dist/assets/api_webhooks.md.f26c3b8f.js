import{_ as e,o,c as a,O as s}from"./chunks/framework.bdcb0ee1.js";const g=JSON.parse('{"title":"Webhooks","description":"","frontmatter":{},"headers":[],"relativePath":"api/webhooks.md","filePath":"api/webhooks.md","lastUpdated":1737191097000}'),i={name:"api/webhooks.md"},r=s(`<h1 id="webhooks" tabindex="-1">Webhooks <a class="header-anchor" href="#webhooks" aria-label="Permalink to &quot;Webhooks&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>ForumSpark&#39;s webhook system enables near real-time notifications for various forum events, allowing your applications to respond immediately to changes within your forum. When an event occurs, our system sends detailed information to your specified endpoint, enabling seamless integration with your external systems.</p><h2 id="event-types" tabindex="-1">Event Types <a class="header-anchor" href="#event-types" aria-label="Permalink to &quot;Event Types&quot;">​</a></h2><p>ForumSpark supports webhooks for a comprehensive range of forum events across different resource types:</p><h3 id="topics" tabindex="-1">Topics <a class="header-anchor" href="#topics" aria-label="Permalink to &quot;Topics&quot;">​</a></h3><ul><li><code>topics/create</code>: Triggered when a new topic is created</li><li><code>topics/update</code>: Triggered when a topic is modified</li><li><code>topics/delete</code>: Triggered when a topic is removed</li></ul><h3 id="replies" tabindex="-1">Replies <a class="header-anchor" href="#replies" aria-label="Permalink to &quot;Replies&quot;">​</a></h3><ul><li><code>replies/create</code>: Triggered when a new reply is posted</li><li><code>replies/update</code>: Triggered when a reply is edited</li><li><code>replies/delete</code>: Triggered when a reply is removed</li></ul><h3 id="forums" tabindex="-1">Forums <a class="header-anchor" href="#forums" aria-label="Permalink to &quot;Forums&quot;">​</a></h3><ul><li><code>forums/create</code>: Triggered when a new forum is created</li><li><code>forums/update</code>: Triggered when forum settings are modified</li><li><code>forums/delete</code>: Triggered when a forum is removed</li></ul><h3 id="groups" tabindex="-1">Groups <a class="header-anchor" href="#groups" aria-label="Permalink to &quot;Groups&quot;">​</a></h3><ul><li><code>groups/create</code>: Triggered when a new group is created</li><li><code>groups/update</code>: Triggered when group settings are modified</li><li><code>groups/delete</code>: Triggered when a group is removed</li></ul><h3 id="users" tabindex="-1">Users <a class="header-anchor" href="#users" aria-label="Permalink to &quot;Users&quot;">​</a></h3><ul><li><code>users/create</code>: Triggered when a new user registers</li><li><code>users/update</code>: Triggered when user information is modified</li><li><code>users/delete</code>: Triggered when a user account is removed</li></ul><h2 id="authentication-and-permissions" tabindex="-1">Authentication and Permissions <a class="header-anchor" href="#authentication-and-permissions" aria-label="Permalink to &quot;Authentication and Permissions&quot;">​</a></h2><p>To receive webhook notifications for specific events, your API token must have appropriate permissions for the corresponding resources. For instance, to receive notifications about topic-related events, your token must have either the <code>topics.read</code> or <code>topics.write</code> permission. This permission-based system ensures secure access to sensitive information while allowing flexibility in implementation.</p><h2 id="webhook-payload" tabindex="-1">Webhook Payload <a class="header-anchor" href="#webhook-payload" aria-label="Permalink to &quot;Webhook Payload&quot;">​</a></h2><p>When an event occurs, the webhook system sends a payload to your specified endpoint that matches the format of our API endpoint responses. This consistency makes it easier to process webhook data using the same logic you use for direct API interactions.</p><h2 id="reliability-and-retries" tabindex="-1">Reliability and Retries <a class="header-anchor" href="#reliability-and-retries" aria-label="Permalink to &quot;Reliability and Retries&quot;">​</a></h2><p>Our webhook system implements a robust retry mechanism to ensure reliable delivery of event notifications. In case of delivery failures, the system will automatically attempt to resend the webhook up to 10 times over a designated period. This retry mechanism helps ensure that your application doesn&#39;t miss critical events due to temporary network issues or system downtime.</p><h2 id="webhook-management" tabindex="-1">Webhook Management <a class="header-anchor" href="#webhook-management" aria-label="Permalink to &quot;Webhook Management&quot;">​</a></h2><p>You can manage your webhook subscriptions programmatically through our API. This includes:</p><ul><li>Creating new webhook subscriptions</li><li>Removing webhook subscriptions when they&#39;re no longer needed</li><li>Viewing current webhook configurations</li></ul><p>Detailed endpoint documentation for webhook management is available in our main API documentation.</p><h2 id="board-identification" tabindex="-1">Board Identification <a class="header-anchor" href="#board-identification" aria-label="Permalink to &quot;Board Identification&quot;">​</a></h2><p>Each webhook request includes a <code>X-ForumSpark-Board</code> header that identifies the source forum of the event. This header contains the complete forum domain, for example <code>support.forumspark.net</code>. This information allows you to handle webhooks from multiple forums within a single endpoint while maintaining proper context for each event.</p><h2 id="request-signing-and-security" tabindex="-1">Request Signing and Security <a class="header-anchor" href="#request-signing-and-security" aria-label="Permalink to &quot;Request Signing and Security&quot;">​</a></h2><p>To ensure the authenticity of webhook requests, ForumSpark implements a request signing mechanism. When you create a new webhook through the API, you&#39;ll receive a signing secret. This secret is only displayed once during creation, so it should be securely stored for future use.</p><p>Each webhook request includes a <code>X-ForumSpark-Signature</code> header containing a signature generated using your webhook&#39;s secret. This signature is created using HMAC SHA-256 with the JSON payload as the message and your signing secret as the key.</p><p>To validate incoming webhooks, you should:</p><ol><li>Extract the signature from the <code>X-ForumSpark-Signature</code> header</li><li>Generate a signature using the raw JSON payload and your stored secret</li><li>Compare the generated signature with the one provided in the header</li></ol><p>Here&#39;s an example of how to generate and verify the signature in PHP:</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">signature </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">hash_hmac</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">sha256</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">requestJson</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">secret</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// To verify, compare this signature with the X-ForumSpark-Signature header</span></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">isValid </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">hash_equals</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">signature</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">forumSparkSignature</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>Always verify the signature of incoming webhooks before processing them to ensure the requests are genuinely from ForumSpark. This helps prevent unauthorized actors from sending fake webhook events to your endpoint.</p><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><p>When implementing webhook handlers, consider the following recommendations:</p><ul><li>Implement proper validation of incoming webhooks to ensure security</li><li>Process webhook payloads asynchronously to prevent timeout issues</li><li>Maintain idempotency in your webhook processing to handle potential duplicate deliveries</li><li>Monitor webhook delivery success rates and implement appropriate logging</li><li>Ensure your endpoint responds quickly to webhook deliveries (recommended within 5 seconds)</li></ul><h2 id="error-handling" tabindex="-1">Error Handling <a class="header-anchor" href="#error-handling" aria-label="Permalink to &quot;Error Handling&quot;">​</a></h2><p>Your webhook endpoint should return an appropriate HTTP status code to indicate successful receipt of the webhook. Status codes in the 2xx range indicate success, while other status codes will trigger our retry mechanism. Consider implementing a queueing system if your webhook processing might take longer than a few seconds.</p>`,40),t=[r];function n(l,c,d,p,h,u){return o(),a("div",null,t)}const y=e(i,[["render",n]]);export{g as __pageData,y as default};
